//Path LoopOut

valueAtTime(time%key(numKeys).time)

_________________________________________________________________________________________________________

//automatically synch audio across different compositions (https://www.youtube.com/watch?v=b2nwO2Kbd8U)

1.precomp audio tracks
2.drop your new audio precomp into an exiting precomp in your timeline.
3.apply "Time-remap" to that audio precomp
4. paste this expression:

MasterC = "Name of you main composition here";
PreC = thisComp.name;

C = comp(MasterC);
L = C.layer(PreC);
Main_T = time + L.startTime;

5.type the exact name of your main composition.

6.set it as a Guide Layer and copy it in any comp that you want.

----------------------------------------------------------------------------------------------------------
Round Numbers:

in source text type:

Math.round(effect("Slider Control")("Slider"))

return decimal:

Math.round(effect("Slider Control")("Slider")*10)/10

Math.round(effect("Slider Control")("Slider")*100)/100

------------------------------------------------------------------------------------------------------
Wiggle Between two Value:


minVal = -8;
maxVal = 4;
freq = 1; // oscillations per second
avgVal = (minVal + maxVal)/2;
amp = (maxVal - minVal)/2
avgVal + amp*(Math.sin(time*freq*Math.PI*2))

------------------------------------------------------------------------------------------------------------
DELAY expresion


delay = -0.2
Poffset   = [683,735]; // set numbers manually to target layer start position 
target = thisComp.layer("Shape Layer 3").transform.position // link thisComp to target layer position

value + target.valueAtTime(time + delay) - Poffset 


--------------------------------------------------------------------------------------------------------------
Bouncing Expression


n = 0;
if (numKeys > 0) {
n = nearestKey(time).index;
if (key(n).time > time){
n--;
}
}
if (n == 0) {
t = 0;
} else {
t = time - key(n).time;
}
if (n > 0 && t < 1){
v = velocityAtTime(key(n).time - thisComp.frameDuration/10);
amp = 4;
freq = 2.0;
decay = 6.0;
value + (v/100)*amp*Math.sin(freq*t*2*Math.PI)/Math.exp(decay*t);
}else{
value;
}




